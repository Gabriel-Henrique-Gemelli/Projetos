Capitulo 3:

a pilha de chamada e um pilha que existe dentro das linguagens que e assim:
existe a chamada principal e chamadas secundarias que vao sendo colocadas em primeiro llugar e saindo como primeiro lugar ate nao restar mais nada

resumo do capitulo 3:
* recursao e quando uma funçao chama a si mesmo 
* toda a funçao recursiva tem dois casos: o caso base e o caso recursivo
* uma pilha tem duas operaçoes: push e pop
* todas as chamadas de funçao vao para a pilha de chamada 
* a pilha de chamada pode ficar muito grande e ocupar muita memoria

capitulo 4:

para fazer um DC (Divisao e conquista) e recomendavel que se siga dois passos
1. achar o caso base, ou seja e o caso mais simples para o problema.
2. Descubra como reduzir o problema ate que ele se torne um caso base.
Existem linguagens de programaçao que nao possuem funçoes de loop, logo a unica maneira sao usando funçoes recursivas

o quick sort e um algoritmo de ordenaçao, e muito mais rapido que a ordenaçao por seleçao

como fazer um particionamento:
1 escolha um pivo
2 separe os menores e maiores valores para o mesmo

dessa maneira voce tem:
* um subarray contendo todos os numeros menores que o pivo
* o pivo 
* um subarray contendo todos os numeros maiores que o pivo 

compreensao de lista, por exemplo 
menor = [i for i in lista[1:] if i <= pivo]

equivale a 
menor = []
for i in lista[1:]:
    if i <= pivo:
        menor.append(i)

Resumo capitulo 4:
* a estrategia funciona por meio de Divisao do problema em problemas menores, se voce estiver utilizando Dc em uma lista o caso base provavelmente sera um array vazio ou um array com apenas um elemento
* se voce estiver implementando um quick sort, escolha um elemento aleatorio como pivo, o tempo de execuçao medio do quicksort e O(n log n)
* a constante na notaçao big o pode ser relevante em alguns casos esta e a razao pela qual quicksort e mais rapido que o merge sort 
* a constante dificilmente sera relevante na comparaçao entre pesquisa simples e pesquisa binaria pois O(log n) e muito mais rapido do que O(n) quando sua lista e grande
capitulo 5:
Funçoes hash: 
nume funçao hash voce insere uma string e a funçao deve retornar um numero.
Existem alguns requisitos para uma funçao hash.
* Ela deve ser consistente, se ao inserir a palavra maça e a funçao retornar 4, ela deve sempre retornar 4, caso o contrario ela tem alguma coisa de errado.
* A funçao deve mapear diferentes palavras para diferentes numeros 
- dicionalrios em python tambem pode ser chamados de tabelas hash
para crialos em python precisa apenas da funçao dict()
o processo de tranformar um nome de um site em um numero de ip se chama "Resoluçao DNS" e sao utilizadas tabelas hash
tabela hash pode ser usada como cache
As tableas hash sao uteis para:
* Modelar relaçoes de dois itens
* filtrar por duplicata
* caching/memorizaçao de dados, em vez de solicitar estes dados do servidor
Colisao:
* em hash isso quer dizer que dois nomes foram indicados no mesmo espaço de memoria 
para resolver isso:
se diversas chaves mapeam para o mesmo lugar crie uma lista encadeada neste espaço
redimencionamento:
* e quando a quantidade de itens na tabela hash e maior do que o tamanho da lista, logo o tamanho da lista tem que aumentar
fator de carga:
ele mede a quantidade de espaços na sua tabela hash que con tinua vazio
um fator de carga maior que um indica que e impossivel voce ter um espaço para cada item 
Um regra geral para saber se um array deve ter seu tamanho aumentado e se o fator de carga for maior do que 0,7
Resumo do capiutlo:
* voce pode fazer uma tabela hash quando se junta uma funça hash com  um array 
* colisoes sao um problema, E necessario haver uma funçao hash que minimize colisoes 
* as tabelas hash sao extremamentes rapidas para pesquisarr inserir e remover itens 
* Tabelas hash sao boas para modelar relaçoes entre dois itens 
* se o seu fator de carga for maior do que 0,7 e Aconselhavel fazer um redimensionamento em seu array
* As tabelas hash sao utilizadas como cache de dados(como em u servidor web por exemplo)
* Tabelas hash sao otimas para localizar duplicatas
capitulo 6:
introdução a grafos:
Ele e bastante utilizado em "problemas de caminho minimo"
Uma maneira de resolver esse tipo de problema e:
* Modele o problema utilizando grafos.
* resolva o problema utilizando a pesquisa em largura.
Um modelo de grafo no geral e um conjunto de conexoes.
Cada grafo e constituido em vertices e arrestas aonde:
vertice: e o ponto inicial
Aresta: e a conexao entre os dois
sao uma maneira de modelar como eventos diferentes estao conectados entre si
pesquisa em largura:
ela ajuda a responder duas questoes
* existe algum caminho dom vertice A ate o vertice B
Qual o caminho minimo de vertices A ate o vertice B
o algoritmo de grafos so funciona devido ao uso de filas, que o primeiro a entrar e o primeiro a ser analisado.
As filas sao uma estruturas de dados FIFO first in first out.
Ja as filas seguem um padrao LIFO(Last in first out)
Eles tem setas apontadas para eles mas nenhuma seta saindo deles para outros esse processo se chama de digrafo,onde a relação acontece de apenas um sentido
Arvore e um tipo especial de grafo em que nenhuma aresta jamais aponta de volta 
resumo capitulo 6:
* A pesquisa em largura lhe diz se ha um caminho de A para base;
* Se esse caminho minimo existir, a pesquisa em largura lhe dara o caminho minimo;
* se voce tem um problema do tipo "Encontre o menor X", tente modelar o seu problema utilizando grafos e use a pesquisa em largura para resolver;
* um digrafo contem setas e as relaçoes seguem a direçao das setas (Rama -> Adit significa que rama deve dinheiro a adita mas adit nao deve dinheiro a rama)
* Grafos nao direcionados nao contem setas, e a relaçao acontece nos dois sentidos(Ross - rachel significa que Ross namorou rachel, e rachel namorou ross)
* Filas sao FIFO(first in first out)
* Pilhas sao LIFO(Last in First out)
* Voce precisa verificar as pessoas na ordem em que elas foram adicionadas a lista de pesquisa, portanto a lista de pesquisa deve ser uma fila,caso contrario voce nao obtera o caminho minimo.
* Cada vez que voce precisar verificar alguem, procure nao verificalo novamente. caso contrario, podera acabar em um loop infinito.
começando o capitulo 7:
* o algoritmo de dijkstra e utilizando para calcular grafos ponderados, ou seja grafos que poussuem outro tipo de informaçao, exemplo tempo
* o algoritmo de dujkstra tem 4 etapas:
1 encontre o vertice mais "barato", este e o vertice em que voce consegue chegar no menor tempo possivel
2 Atualize o custo dos vizinho desse vertice
3 repita ate que voce tenha feito isso em casa vertice do grafo
4 calcule o caminho final
Grafo ponderado sao aqueles em que as arrestas tem pesos, ja os grafos nao ponderados, nao tem pesos
o algoritmo de dijkastra so funciona com grafos sem ciclos ou em graficos com um ciclo de peso positivo
* o algoritmo de dijkastra nao funciona com valores negativos, ou seja Se for comparado preçoes entre dois itens e um devolver dinheiro o algoritmo quebra.
* para isso existe um algoritmo chamado "algoritmo de bellman-ford"